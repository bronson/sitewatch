#!/bin/bash
#
# Ensures a website returns the expected results

# Requires /usr/bin/time to be GNU Time.  BSD won't work.


# executing the configuration is potentially a security risk.
# TODO: replace with a proper config file?
. ./config.sh

if [ ! -f expected.html ]; then
  echo 'generating request to create expected.html'
  curl --fail --silent --show-error -o "expected.html" "$URL"
fi

result="$(/bin/date +%F_%H-%M-%S-%Z)-result.html"

# This is so completely insane...  Both Centos and Ubuntu have GNU time v1.7.
# Ubuntu's puts error messages in its output unless you specify --quiet.
# Fedora's doesn't put error messages in its output and bombs if you say --quiet.
if /usr/bin/time --quiet echo > /dev/null 2>&1; then
  quiet="--quiet"
fi

# --fail just says don't output the progress bar to stdout, and ignore any non-200 results
echo -ne "\"$(/bin/date +"%Y-%m-%d %H:%M:%S")\"," >> command-times.csv
output="$(/usr/bin/time -a -o >(tr -d '\n' >> command-times.csv) -f %e $quiet \
  curl --fail --silent --show-error -m "$TIMEOUT" -o "$result" "$URL" 2>&1)"
# TODO: should make all the following code uninterruptible.
# Otherwise, terminating the script could potentially corrput the CSV.
if [ $? = 0 ]; then
  if ! diff expected.html "$result" > result.diff; then
    echo ',"output differs"' >> command-times.csv
    # ensure command-errors.txt doesn't grow without bound
    if [ ! -e command-errors.txt ] || [ "$(find command-errors.txt -size -500k)" == command-errors.txt ]; then
      printf "\n\n\n$result:\n" >> command-errors.txt
      cat result.diff >> command-errors.txt
    fi
  else
    echo >> command-times.csv
  fi
  rm -f result.diff "$result"
else
  echo ",\""$output"\"" >> command-times.csv
fi
